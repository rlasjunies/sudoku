/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  SolutionsByRules,
  SudokuBoard,
  SudokuBoardCell,
  SudokuWizardConfiguration,
} from './services/sudoku/sudoku';

export namespace Components {
  interface AccButton {}
  interface AccFlipbox {
    'flip': boolean;
  }
  interface AccPage {
    'hide': () => Promise<void>;
    'show': () => Promise<void>;
  }
  interface AccSwitch {}
  interface AccTimer {
    'time': number;
  }
  interface AppRoot {}
  interface CreateNewBoard {}
  interface KeyBoard3 {
    'hideClearKey': boolean;
    'hideUndoKey': boolean;
    'remainingNumbers': number[];
  }
  interface SplashScreenPage {}
  interface SudokuBoardCellComponent {
    'candidates': boolean[];
    'cell': SudokuBoardCell;
  }
  interface SudokuBoardComponent {
    'board': SudokuBoard;
    'boardSolved': boolean;
    'cellSelected': number;
    'incorrectCells': number[];
    'lastCellOfTheGame': number;
    'solutionsByRules': SolutionsByRules;
    'solvedBlock': number;
    'solvedCol': number;
    'solvedRow': number;
    'wizardConfiguration': SudokuWizardConfiguration;
  }
  interface SudokuPage {}
  interface SudokuWizardPage {}
}

declare global {


  interface HTMLAccButtonElement extends Components.AccButton, HTMLStencilElement {}
  var HTMLAccButtonElement: {
    prototype: HTMLAccButtonElement;
    new (): HTMLAccButtonElement;
  };

  interface HTMLAccFlipboxElement extends Components.AccFlipbox, HTMLStencilElement {}
  var HTMLAccFlipboxElement: {
    prototype: HTMLAccFlipboxElement;
    new (): HTMLAccFlipboxElement;
  };

  interface HTMLAccPageElement extends Components.AccPage, HTMLStencilElement {}
  var HTMLAccPageElement: {
    prototype: HTMLAccPageElement;
    new (): HTMLAccPageElement;
  };

  interface HTMLAccSwitchElement extends Components.AccSwitch, HTMLStencilElement {}
  var HTMLAccSwitchElement: {
    prototype: HTMLAccSwitchElement;
    new (): HTMLAccSwitchElement;
  };

  interface HTMLAccTimerElement extends Components.AccTimer, HTMLStencilElement {}
  var HTMLAccTimerElement: {
    prototype: HTMLAccTimerElement;
    new (): HTMLAccTimerElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLCreateNewBoardElement extends Components.CreateNewBoard, HTMLStencilElement {}
  var HTMLCreateNewBoardElement: {
    prototype: HTMLCreateNewBoardElement;
    new (): HTMLCreateNewBoardElement;
  };

  interface HTMLKeyBoard3Element extends Components.KeyBoard3, HTMLStencilElement {}
  var HTMLKeyBoard3Element: {
    prototype: HTMLKeyBoard3Element;
    new (): HTMLKeyBoard3Element;
  };

  interface HTMLSplashScreenPageElement extends Components.SplashScreenPage, HTMLStencilElement {}
  var HTMLSplashScreenPageElement: {
    prototype: HTMLSplashScreenPageElement;
    new (): HTMLSplashScreenPageElement;
  };

  interface HTMLSudokuBoardCellComponentElement extends Components.SudokuBoardCellComponent, HTMLStencilElement {}
  var HTMLSudokuBoardCellComponentElement: {
    prototype: HTMLSudokuBoardCellComponentElement;
    new (): HTMLSudokuBoardCellComponentElement;
  };

  interface HTMLSudokuBoardComponentElement extends Components.SudokuBoardComponent, HTMLStencilElement {}
  var HTMLSudokuBoardComponentElement: {
    prototype: HTMLSudokuBoardComponentElement;
    new (): HTMLSudokuBoardComponentElement;
  };

  interface HTMLSudokuPageElement extends Components.SudokuPage, HTMLStencilElement {}
  var HTMLSudokuPageElement: {
    prototype: HTMLSudokuPageElement;
    new (): HTMLSudokuPageElement;
  };

  interface HTMLSudokuWizardPageElement extends Components.SudokuWizardPage, HTMLStencilElement {}
  var HTMLSudokuWizardPageElement: {
    prototype: HTMLSudokuWizardPageElement;
    new (): HTMLSudokuWizardPageElement;
  };
  interface HTMLElementTagNameMap {
    'acc-button': HTMLAccButtonElement;
    'acc-flipbox': HTMLAccFlipboxElement;
    'acc-page': HTMLAccPageElement;
    'acc-switch': HTMLAccSwitchElement;
    'acc-timer': HTMLAccTimerElement;
    'app-root': HTMLAppRootElement;
    'create-new-board': HTMLCreateNewBoardElement;
    'key-board3': HTMLKeyBoard3Element;
    'splash-screen-page': HTMLSplashScreenPageElement;
    'sudoku-board-cell-component': HTMLSudokuBoardCellComponentElement;
    'sudoku-board-component': HTMLSudokuBoardComponentElement;
    'sudoku-page': HTMLSudokuPageElement;
    'sudoku-wizard-page': HTMLSudokuWizardPageElement;
  }
}

declare namespace LocalJSX {
  interface AccButton extends JSXBase.HTMLAttributes<HTMLAccButtonElement> {
    'onClick_'?: (event: CustomEvent<any>) => void;
  }
  interface AccFlipbox extends JSXBase.HTMLAttributes<HTMLAccFlipboxElement> {
    'flip'?: boolean;
  }
  interface AccPage extends JSXBase.HTMLAttributes<HTMLAccPageElement> {}
  interface AccSwitch extends JSXBase.HTMLAttributes<HTMLAccSwitchElement> {
    'onSwitch'?: (event: CustomEvent<any>) => void;
  }
  interface AccTimer extends JSXBase.HTMLAttributes<HTMLAccTimerElement> {
    'time'?: number;
  }
  interface AppRoot extends JSXBase.HTMLAttributes<HTMLAppRootElement> {}
  interface CreateNewBoard extends JSXBase.HTMLAttributes<HTMLCreateNewBoardElement> {}
  interface KeyBoard3 extends JSXBase.HTMLAttributes<HTMLKeyBoard3Element> {
    'hideClearKey'?: boolean;
    'hideUndoKey'?: boolean;
    'onClearClicked'?: (event: CustomEvent<any>) => void;
    'onDraftNumberClicked'?: (event: CustomEvent<any>) => void;
    'onNumberClicked'?: (event: CustomEvent<any>) => void;
    'onUndoClicked'?: (event: CustomEvent<any>) => void;
    'remainingNumbers'?: number[];
  }
  interface SplashScreenPage extends JSXBase.HTMLAttributes<HTMLSplashScreenPageElement> {}
  interface SudokuBoardCellComponent extends JSXBase.HTMLAttributes<HTMLSudokuBoardCellComponentElement> {
    'candidates'?: boolean[];
    'cell'?: SudokuBoardCell;
  }
  interface SudokuBoardComponent extends JSXBase.HTMLAttributes<HTMLSudokuBoardComponentElement> {
    'board'?: SudokuBoard;
    'boardSolved'?: boolean;
    'cellSelected'?: number;
    'incorrectCells'?: number[];
    'lastCellOfTheGame'?: number;
    'onCellSelection'?: (event: CustomEvent<any>) => void;
    'solutionsByRules'?: SolutionsByRules;
    'solvedBlock'?: number;
    'solvedCol'?: number;
    'solvedRow'?: number;
    'wizardConfiguration'?: SudokuWizardConfiguration;
  }
  interface SudokuPage extends JSXBase.HTMLAttributes<HTMLSudokuPageElement> {}
  interface SudokuWizardPage extends JSXBase.HTMLAttributes<HTMLSudokuWizardPageElement> {}

  interface IntrinsicElements {
    'acc-button': AccButton;
    'acc-flipbox': AccFlipbox;
    'acc-page': AccPage;
    'acc-switch': AccSwitch;
    'acc-timer': AccTimer;
    'app-root': AppRoot;
    'create-new-board': CreateNewBoard;
    'key-board3': KeyBoard3;
    'splash-screen-page': SplashScreenPage;
    'sudoku-board-cell-component': SudokuBoardCellComponent;
    'sudoku-board-component': SudokuBoardComponent;
    'sudoku-page': SudokuPage;
    'sudoku-wizard-page': SudokuWizardPage;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


